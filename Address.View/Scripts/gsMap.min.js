/*
* jQuery plugin for map - v1.0 - 05/2012
* 
* Copyright (c) 2012 "badboy" Đặng Việt Hùng
* Email: danghung1202@gmail.com
* Dual licensed under the MIT and GPL licenses.
* http://dangviethung.web.golden.net.com/about/license/
*/
(function (a) { var b = { init: function (d) { var b = { mapProvider: "Google", mapWidth: 0, mapHeight: 0, mapGoogleOptions: { zoom: 12, center: new google.maps.LatLng(21.02867, 105.84148), mapTypeId: google.maps.MapTypeId.ROADMAP, mapTypeControl: true, mapTypeControlOptions: { style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR, position: google.maps.ControlPosition.TOP_RIGHT }, zoomControl: true, zoomControlOptions: { style: google.maps.ZoomControlStyle.LARGE, position: google.maps.ControlPosition.LEFT_CENTER }, panControl: true, scaleControl: true, streetViewControl: true }, mapBingOptions: {} }; d && a.extend(true, b, d); var c; this.each(function () { b.mapHeight != 0 && a(this).css({ height: b.mapHeight }); b.mapWidth != 0 && a(this).css({ width: b.mapWidth }); b.mapProvider && a(this).data("provider", { mapProvider: b.mapProvider }); switch (b.mapProvider.toLowerCase()) { case "google": c = new google.maps.Map(a(this)[0], b.mapGoogleOptions); a(this).data("map", { map: c }); a(this).data("line", { line1: undefined, line2: undefined }); break; case "bing": c = new Microsoft.Maps.Map(a(this)[0], b.mapBingOptions); a(this).data("map", { map: c }); break; default: alert(b.mapProvider) } }); return c }, event: function (d, c) { var b = null; this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": var e = a(this).data("map").map; b = google.maps.event.addListener(e, d, c); break; case "bing": break; default: alert(settings.mapProvider) } }); return b }, addEvent: function (d, e, c) { var b = null; this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": var f = a(this).data("map").map; b = google.maps.event.addListener(d, e, c); break; case "bing": break; default: alert(settings.mapProvider) } }); return b }, addMarker: function (d) { var b = { draggable: true, raiseOnDrag: true }; d && a.extend(true, b, d); var c; this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": var d = a(this).data("map").map; !b.position && a.extend(true, b, { position: d.getCenter() }); c = new google.maps.Marker(b); c.setMap(d); break; case "bing": break; default: alert(settings.mapProvider) } }); return c }, addPolygon: function (d) { var b = { path: [], strokeColor: "#ff0000", strokeOpacity: .8, strokeWeight: 1.5, fillOpacity: .1, editable: false }; d && a.extend(true, b, d); if (b.editable) b.editable = false; var c; this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": var d = a(this).data("map").map; c = new google.maps.Polygon(b); c.setMap(d); break; case "bing": break; default: alert(settings.mapProvider) } }); return c }, addPolyline: function (d) { var b = { path: [], strokeColor: "#ff0000", strokeOpacity: .5, strokeWeight: 1.5, editable: false }; d && a.extend(true, b, d); if (b.editable) b.editable = false; var c; this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": var d = a(this).data("map").map; c = new google.maps.Polyline(b); c.setMap(d); break; case "bing": break; default: alert(settings.mapProvider) } }); return c }, addControl: function (c, f, e, g) { var d = { padding: "3px 5px", width: "auto", "z-index": "1000002", border: "none" }; e && a.extend(true, d, e); var b; this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": b = document.createElement("DIV"); a(b).attr("id", g); a(b).css(d); a(b).html(f); var e = a(this).data("map").map; if (!c) c = google.maps.ControlPosition.TOP_LEFT; e.controls[c].push(b); break; case "bing": break; default: alert(settings.mapProvider) } }); return b }, addSearchBox: function (e) { var d = this.gsMap("addControl", e, '<span>t\u00ecm ki\u1ebfm</span><input style="margin-left: 4px; width:200px;" type="text" id="searchPlaceAuto" />', { background: "none repeat scroll 0 0 #000", opacity: 1, display: "block", color: "#F51A1A", "font-size": "14px", "font-weight": "bold" }), c = new google.maps.places.Autocomplete(a(d).find("input#searchPlaceAuto")[0]), b; this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": b = a(this).data("map").map; c.bindTo("bounds", b); c.setTypes(["geocode"]); google.maps.event.addListener(c, "place_changed", function () { var a = c.getPlace(); if (a.geometry.viewport) b.fitBounds(a.geometry.viewport); else { b.setCenter(a.geometry.location); b.setZoom(17) } }); break; case "bing": break; default: alert(settings.mapProvider) } }); return d }, createPolygon: function () { var b; this.gsMap("removeDraftLines"); this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": var c = a(this).data("map").map, d, e; c.setOptions({ draggableCursor: "crosshair" }); d = new google.maps.Polyline({ clickable: false, map: c, path: [], strokeOpacity: 1, strokeWeight: 1.5 }); e = new google.maps.Polyline({ clickable: false, map: c, path: [], strokeOpacity: 1, strokeWeight: 1.5 }); b = new google.maps.Polygon({ map: c, strokeOpacity: .8, strokeWeight: 1.5, fillOpacity: .15, path: [] }); var f = c.getMapTypeId(); if (f == "roadmap") { d.setOptions({ strokeColor: "#787878" }); e.setOptions({ strokeColor: "#787878" }); b.setOptions({ strokeColor: "#ff0000" }) } else { d.setOptions({ strokeColor: "#fff" }); e.setOptions({ strokeColor: "#fff" }); b.setOptions({ strokeColor: "#F7FB09" }) } a(this).data("line", { line1: d, line2: e }); google.maps.event.addListener(c, "click", function (a) { b.stopEdit(); b.getPath().push(a.latLng); if (b.getPath().getLength() == 3) { google.maps.event.clearListeners(c, "mousemove"); google.maps.event.clearListeners(c, "click"); d.setMap(null); e.setMap(null); c.setOptions({ draggableCursor: "default" }) } b.runEdit(true) }); google.maps.event.addListener(c, "mousemove", function (c) { var a = b.getPath().getLength(); if (a >= 1) { var h = b.getPath().getAt(a - 1), f = [h, c.latLng]; d.setPath(f); var i = b.getPath().getAt(0), g = [i, c.latLng]; e.setPath(g) } }); break; case "bing": break; default: alert(settings.mapProvider) } }); return b }, createPolyline: function () { var b; this.gsMap("removeDraftLines"); this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": var c = a(this).data("map").map, d; c.setOptions({ draggableCursor: "crosshair" }); d = new google.maps.Polyline({ clickable: false, map: c, path: [], strokeOpacity: 1, strokeWeight: 3.5 }); b = new google.maps.Polyline({ map: c, strokeOpacity: .5, strokeWeight: 5.5, path: [] }); var e = c.getMapTypeId(); if (e == "roadmap") { d.setOptions({ strokeColor: "#787878" }); b.setOptions({ strokeColor: "#ff0000" }) } else { d.setOptions({ strokeColor: "#fff" }); b.setOptions({ strokeColor: "#F7FB09" }) } a(this).data("line", { line1: d, line2: undefined }); google.maps.event.addListener(c, "click", function (a) { b.stopEdit(); b.getPath().push(a.latLng); if (b.getPath().getLength() == 4) { google.maps.event.clearListeners(c, "mousemove"); google.maps.event.clearListeners(c, "click"); d.setMap(null); c.setOptions({ draggableCursor: "default" }) } b.runEdit(true) }); google.maps.event.addListener(c, "mousemove", function (f) { var a = b.getPath().getLength(); if (a >= 1) { var e = b.getPath().getAt(a - 1), c = [e, f.latLng]; d.setPath(c) } }); break; case "bing": break; default: alert(settings.mapProvider) } }); return b }, removeDraftLines: function () { return this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": var b = a(this).data("map").map; a(this).data("line").line1 && a(this).data("line").line1.setMap(null); a(this).data("line").line2 && a(this).data("line").line2.setMap(null); b.setOptions({ draggableCursor: "default" }); google.maps.event.clearListeners(b, "click"); google.maps.event.clearListeners(b, "mousemove"); google.maps.event.clearListeners(b, "rightclick"); break; case "bing": break; default: alert(settings.mapProvider) } }) }, option: function () { this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": break; case "bing": break; default: alert(settings.mapProvider) } }); return poly }, setEditablePoly: function (b, c) { this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": if (c) b && b.runEdit(true); else b && b.stopEdit(); break; case "bing": break; default: alert(settings.mapProvider) } }) }, fitBounds: function (b) { this.each(function () { switch (a(this).data("provider").mapProvider.toLowerCase()) { case "google": var c = a(this).data("map").map; c.fitBounds(b.getBounds()); break; case "bing": break; default: alert(settings.mapProvider) } }); return b }, getMap: function () { var c = [], b; this.each(function () { b = a(this).data("map").map; c.push(b) }); return b } }; a.fn.gsMap = function (c) { if (b[c]) return b[c].apply(this, Array.prototype.slice.call(arguments, 1)); else if (typeof c === "object" || !c) return b.init.apply(this, arguments); else a.error("Method " + c + " does not exist on jQuery.gsMap") } })(jQuery); if (typeof google.maps.Polygon.prototype.runEdit === "undefined") google.maps.Polygon.prototype.runEdit = function (c) { !c; var a = this; if (c) var e = new google.maps.MarkerImage("http://rs.golden.net.vn/polygonEdit/vertexOver.png", new google.maps.Size(11, 11), new google.maps.Point(0, 0), new google.maps.Point(6, 6)), m = new google.maps.MarkerImage("http://rs.golden.net.vn/polygonEdit/ghostVertexOver.png", new google.maps.Size(11, 11), new google.maps.Point(0, 0), new google.maps.Point(6, 6)), b = new google.maps.Polygon({ map: this.getMap(), strokeColor: this.strokeColor, strokeOpacity: .2, strokeWeight: this.strokeWeight }), g = function () { this.setIcon(m) }, h = function () { this.setIcon(e) }, k = function () { if (b.getPath().getLength() === 0) if (this.marker.inex < a.getPath().getLength() - 1) b.setPath([this.marker.getPosition(), this.getPosition(), a.getPath().getAt(this.marker.inex + 1)]); else this.marker.inex === a.getPath().getLength() - 1 && b.setPath([this.marker.getPosition(), this.getPosition(), a.getPath().getAt(0)]); b.getPath().setAt(1, this.getPosition()) }, d = function (c) { var b = a.getPath().getAt(c.inex); if (c.inex === 0) var d = a.getPath().getAt(a.getPath().getLength() - 1); else var d = a.getPath().getAt(c.inex - 1); if (typeof b !== "undefined" && typeof b.ghostMarker !== "undefined") if (typeof google.maps.geometry === "undefined") if (c.inex < a.getPath().getLength() - 1) b.ghostMarker.setPosition(new google.maps.LatLng(b.lat() + .5 * (a.getPath().getAt(c.inex + 1).lat() - b.lat()), b.lng() + .5 * (a.getPath().getAt(c.inex + 1).lng() - b.lng()))); else c.inex === a.getPath().getLength() - 1 && b.ghostMarker.setPosition(new google.maps.LatLng(b.lat() + .5 * (a.getPath().getAt(0).lat() - b.lat()), b.lng() + .5 * (a.getPath().getAt(0).lng() - b.lng()))); else if (c.inex < a.getPath().getLength() - 1) b.ghostMarker.setPosition(google.maps.geometry.spherical.interpolate(b, a.getPath().getAt(c.inex + 1), .5)); else c.inex === a.getPath().getLength() - 1 && b.ghostMarker.setPosition(google.maps.geometry.spherical.interpolate(b, a.getPath().getAt(0), .5)); if (typeof d !== "undefined" && typeof d.ghostMarker !== "undefined") if (typeof google.maps.geometry === "undefined") d.ghostMarker.setPosition(new google.maps.LatLng(d.lat() + .5 * (c.getPosition().lat() - d.lat()), d.lng() + .5 * (c.getPosition().lng() - d.lng()))); else d.ghostMarker.setPosition(google.maps.geometry.spherical.interpolate(d, c.getPosition(), .5)) }, j = function () { b.getPath().forEach(function () { b.getPath().pop() }); a.getPath().insertAt(this.marker.inex + 1, this.getPosition()); i(a.getPath().getAt(this.marker.inex + 1)).inex = this.marker.inex + 1; d(this.marker); f(a.getPath().getAt(this.marker.inex + 1)); a.getPath().forEach(function (a, b) { if (a.marker) a.marker.inex = b }) }, f = function (b) { if (b.marker.inex < a.getPath().getLength() - 1) { var c = new google.maps.Marker({ position: typeof google.maps.geometry === "undefined" ? new google.maps.LatLng(b.lat() + .5 * (a.getPath().getAt(b.marker.inex + 1).lat() - b.lat()), b.lng() + .5 * (a.getPath().getAt(b.marker.inex + 1).lng() - b.lng())) : google.maps.geometry.spherical.interpolate(b, a.getPath().getAt(b.marker.inex + 1), .5), map: a.getMap(), icon: e, draggable: true, raiseOnDrag: false }); google.maps.event.addListener(c, "mouseover", g); google.maps.event.addListener(c, "mouseout", h); google.maps.event.addListener(c, "drag", k); google.maps.event.addListener(c, "dragend", j); b.ghostMarker = c; c.marker = b.marker; return c } else if (b.marker.inex === a.getPath().getLength() - 1) { var c = new google.maps.Marker({ position: typeof google.maps.geometry === "undefined" ? new google.maps.LatLng(b.lat() + .5 * (a.getPath().getAt(0).lat() - b.lat()), b.lng() + .5 * (a.getPath().getAt(0).lng() - b.lng())) : google.maps.geometry.spherical.interpolate(b, a.getPath().getAt(0), .5), map: a.getMap(), icon: e, draggable: true, raiseOnDrag: false }); google.maps.event.addListener(c, "mouseover", g); google.maps.event.addListener(c, "mouseout", h); google.maps.event.addListener(c, "drag", k); google.maps.event.addListener(c, "dragend", j); b.ghostMarker = c; c.marker = b.marker; return c } return null }; var l = new google.maps.MarkerImage("http://rs.golden.net.vn/polygonEdit/vertex.png", new google.maps.Size(11, 11), new google.maps.Point(0, 0), new google.maps.Point(6, 6)), q = new google.maps.MarkerImage("http://rs.golden.net.vn/polygonEdit/vertexOver.png", new google.maps.Size(11, 11), new google.maps.Point(0, 0), new google.maps.Point(6, 6)), o = function () { this.setIcon(q) }, p = function () { this.setIcon(l) }, r = function () { var b = this.getPosition(); b.marker = this; b.ghostMarker = a.getPath().getAt(this.inex).ghostMarker; a.getPath().setAt(this.inex, b); c && d(this) }, n = function () { if (c) { var e = a.getPath().getAt(this.inex); if (this.inex === 0) var b = a.getPath().getAt(a.getPath().getLength() - 1); else var b = a.getPath().getAt(this.inex - 1); typeof e.ghostMarker !== "undefined" && e.ghostMarker.setMap(null); a.getPath().removeAt(this.inex); a.getPath().forEach(function (a, b) { if (a.marker) a.marker.inex = b }); if (typeof b !== "undefined") if (this.inex <= a.getPath().getLength()) d(b.marker); else { b.ghostMarker.setMap(null); b.ghostMarker = undefined } } else a.getPath().removeAt(this.inex); this.setMap(null); if (a.getPath().getLength() === 1) { b.ghostMarker.setMap(null); a.getPath().pop().marker.setMap(null) } }, i = function (c) { var b = new google.maps.Marker({ position: c, map: a.getMap(), icon: l, draggable: true, raiseOnDrag: false }); google.maps.event.addListener(b, "mouseover", o); google.maps.event.addListener(b, "mouseout", p); google.maps.event.addListener(b, "drag", r); google.maps.event.addListener(b, "rightclick", n); c.marker = b; return b }; this.getPath().forEach(function (a, b) { i(a).inex = b; c && f(a) }) }; if (typeof google.maps.Polygon.prototype.stopEdit === "undefined") google.maps.Polygon.prototype.stopEdit = function () { this.getPath().forEach(function (a) { if (a.marker) { a.marker.setMap(null); a.marker = undefined } if (a.ghostMarker) { a.ghostMarker.setMap(null); a.ghostMarker = undefined } }) }; if (typeof google.maps.Polyline.prototype.runEdit === "undefined") google.maps.Polyline.prototype.runEdit = function (c) { !c; var a = this; if (c) var g = new google.maps.MarkerImage("http://rs.golden.net.vn/polygonEdit/vertex.png", new google.maps.Size(11, 11), new google.maps.Point(0, 0), new google.maps.Point(6, 6)), k = new google.maps.MarkerImage("http://rs.golden.net.vn/polygonEdit/vertexOver.png", new google.maps.Size(11, 11), new google.maps.Point(0, 0), new google.maps.Point(6, 6)), b = new google.maps.Polyline({ map: this.getMap(), strokeColor: this.strokeColor, strokeOpacity: .2, strokeWeight: this.strokeWeight }), i = function () { this.setIcon(k) }, j = function () { this.setIcon(g) }, n = function () { b.getPath().getLength() === 0 && b.setPath([this.marker.getPosition(), this.getPosition(), a.getPath().getAt(this.marker.inex + 1)]); b.getPath().setAt(1, this.getPosition()) }, d = function (d) { var c = a.getPath().getAt(d.inex), b = a.getPath().getAt(d.inex - 1); if (typeof c !== "undefined" && typeof c.ghostMarker !== "undefined") if (typeof google.maps.geometry === "undefined") c.ghostMarker.setPosition(new google.maps.LatLng(c.lat() + .5 * (a.getPath().getAt(d.inex + 1).lat() - c.lat()), c.lng() + .5 * (a.getPath().getAt(d.inex + 1).lng() - c.lng()))); else c.ghostMarker.setPosition(google.maps.geometry.spherical.interpolate(c, a.getPath().getAt(d.inex + 1), .5)); if (typeof b !== "undefined" && typeof b.ghostMarker !== "undefined") if (typeof google.maps.geometry === "undefined") b.ghostMarker.setPosition(new google.maps.LatLng(b.lat() + .5 * (d.getPosition().lat() - b.lat()), b.lng() + .5 * (d.getPosition().lng() - b.lng()))); else b.ghostMarker.setPosition(google.maps.geometry.spherical.interpolate(b, d.getPosition(), .5)) }, l = function () { b.getPath().forEach(function () { b.getPath().pop() }); a.getPath().insertAt(this.marker.inex + 1, this.getPosition()); f(a.getPath().getAt(this.marker.inex + 1)).inex = this.marker.inex + 1; d(this.marker); e(a.getPath().getAt(this.marker.inex + 1)); a.getPath().forEach(function (a, b) { if (a.marker) a.marker.inex = b }) }, e = function (b) { if (b.marker.inex < a.getPath().getLength() - 1) { var c = new google.maps.Marker({ position: typeof google.maps.geometry === "undefined" ? new google.maps.LatLng(b.lat() + .5 * (a.getPath().getAt(b.marker.inex + 1).lat() - b.lat()), b.lng() + .5 * (a.getPath().getAt(b.marker.inex + 1).lng() - b.lng())) : google.maps.geometry.spherical.interpolate(b, a.getPath().getAt(b.marker.inex + 1), .5), map: a.getMap(), icon: g, draggable: true, raiseOnDrag: false }); google.maps.event.addListener(c, "mouseover", i); google.maps.event.addListener(c, "mouseout", j); google.maps.event.addListener(c, "drag", n); google.maps.event.addListener(c, "dragend", l); b.ghostMarker = c; c.marker = b.marker; return c } return null }; var h = new google.maps.MarkerImage("http://rs.golden.net.vn/polygonEdit/vertex.png", new google.maps.Size(11, 11), new google.maps.Point(0, 0), new google.maps.Point(6, 6)), q = new google.maps.MarkerImage("http://rs.golden.net.vn/polygonEdit/vertexOver.png", new google.maps.Size(11, 11), new google.maps.Point(0, 0), new google.maps.Point(6, 6)), o = function () { this.setIcon(q) }, p = function () { this.setIcon(h) }, r = function () { var b = this.getPosition(); b.marker = this; b.ghostMarker = a.getPath().getAt(this.inex).ghostMarker; a.getPath().setAt(this.inex, b); c && d(this) }, m = function () { if (c) { var e = a.getPath().getAt(this.inex), b = a.getPath().getAt(this.inex - 1); typeof e.ghostMarker !== "undefined" && e.ghostMarker.setMap(null); a.getPath().removeAt(this.inex); if (typeof b !== "undefined") if (this.inex < a.getPath().getLength()) d(b.marker); else { b.ghostMarker.setMap(null); b.ghostMarker = undefined } } else a.getPath().removeAt(this.inex); this.setMap(null); a.getPath().forEach(function (a, b) { if (a.marker) a.marker.inex = b }); a.getPath().getLength() === 1 && a.getPath().pop().marker.setMap(null) }, f = function (c) { var b = new google.maps.Marker({ position: c, map: a.getMap(), icon: h, draggable: true, raiseOnDrag: false }); google.maps.event.addListener(b, "mouseover", o); google.maps.event.addListener(b, "mouseout", p); google.maps.event.addListener(b, "drag", r); google.maps.event.addListener(b, "rightclick", m); c.marker = b; return b }; this.getPath().forEach(function (a, b) { f(a).inex = b; c && e(a) }) }; if (typeof google.maps.Polyline.prototype.stopEdit === "undefined") google.maps.Polyline.prototype.stopEdit = function () { this.getPath().forEach(function (a) { if (a.marker) { a.marker.setMap(null); a.marker = undefined } if (a.ghostMarker) { a.ghostMarker.setMap(null); a.ghostMarker = undefined } }) }; if (typeof google.maps.Polygon.prototype.getBounds === "undefined") google.maps.Polygon.prototype.getBounds = function () { for (var d = new google.maps.LatLngBounds, e = this.getPaths(), a, c = 0; c < e.getLength() ; c++) { a = e.getAt(c); for (var b = 0; b < a.getLength() ; b++) d.extend(a.getAt(b)) } return d }; if (typeof google.maps.Polyline.prototype.getBounds === "undefined") google.maps.Polyline.prototype.getBounds = function () { for (var b = new google.maps.LatLngBounds, c = this.getPath(), a = 0; a < c.getLength() ; a++) b.extend(c.getAt(a)); return b }; if (typeof google.maps.Polygon.prototype.toGeoString === "undefined") google.maps.Polygon.prototype.toGeoString = function (e) { var b = "", d; if (e == undefined || !e) d = 0; else d = 2; var f = this.getPaths(), a; if (f.length > 0) { a = f.getAt(0); if (a.length > d) { for (var c = 0; c < a.getLength() ; c++) b = b + a.getAt(c).lng() + " " + a.getAt(c).lat() + ","; b = b + a.getAt(0).lng() + " " + a.getAt(0).lat() } } return b }; if (typeof google.maps.Polyline.prototype.toGeoString === "undefined") google.maps.Polyline.prototype.toGeoString = function (f) { var a = "", e; if (f == undefined || !f) e = 0; else e = 1; var b = this.getPath(), c = b.length; if (c > e) { for (var d = 0; d < c - 1; d++) a = a + b.getAt(d).lng() + " " + b.getAt(d).lat() + ","; a = a + b.getAt(c - 1).lng() + " " + b.getAt(c - 1).lat() } return a }; if (typeof google.maps.Marker.prototype.toGeoString === "undefined") google.maps.Marker.prototype.toGeoString = function () { var a = this.getPosition(); return a.lng() + " " + a.lat() }